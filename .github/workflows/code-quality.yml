name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake clang-format clang-tidy

    - name: Check code formatting
      run: |
        find include src tests -name "*.hpp" -o -name "*.cpp" | xargs clang-format --dry-run --Werror

    - name: Setup CMake for analysis
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DNEKO_BUILD_TESTS=ON -DNEKO_AUTO_FETCH_DEPS=ON

    - name: Run static analysis
      run: |
        # Run clang-tidy on source files
        find src -name "*.cpp" -exec clang-tidy {} -p build -- \;

  memory-sanitizer:
    name: Memory Sanitizer (Linux)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake clang

    - name: Configure with AddressSanitizer
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_FLAGS="-fsanitize=address -g -O1" -DCMAKE_C_FLAGS="-fsanitize=address -g -O1" -DNEKO_BUILD_TESTS=ON -DNEKO_AUTO_FETCH_DEPS=ON

    - name: Build with sanitizer
      run: cmake --build build --parallel

    - name: Run tests with sanitizer
      working-directory: build
      run: |
        export ASAN_OPTIONS=detect_leaks=1:abort_on_error=1
        ctest --output-on-failure --verbose

  thread-sanitizer:
    name: Thread Sanitizer (Linux)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake clang

    - name: Configure with ThreadSanitizer
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_FLAGS="-fsanitize=thread -g -O1" -DCMAKE_C_FLAGS="-fsanitize=thread -g -O1" -DNEKO_BUILD_TESTS=ON -DNEKO_AUTO_FETCH_DEPS=ON

    - name: Build with sanitizer
      run: cmake --build build --parallel

    - name: Run tests with sanitizer
      working-directory: build
      run: |
        export TSAN_OPTIONS=abort_on_error=1:history_size=7
        ctest --output-on-failure --verbose

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake gcov lcov

    - name: Configure with coverage
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CXX_FLAGS="--coverage -g -O0" -DCMAKE_C_FLAGS="--coverage -g -O0" -DNEKO_BUILD_TESTS=ON -DNEKO_AUTO_FETCH_DEPS=ON

    - name: Build
      run: cmake --build build --parallel

    - name: Run tests
      working-directory: build
      run: ctest --output-on-failure --verbose

    - name: Generate coverage report
      run: |
        lcov --directory build --capture --output-file coverage.info
        lcov --remove coverage.info '/usr/*' '*/build/_deps/*' '*/tests/*' --output-file coverage.info
        lcov --list coverage.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false