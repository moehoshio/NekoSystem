name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Create Release
      id: create_release
      uses: actions/github-script@v7
      with:
        script: |
          const { data: release } = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: context.ref.replace('refs/tags/', ''),
            name: `Release ${context.ref.replace('refs/tags/', '')}`,
            draft: false,
            prerelease: false
          });
          core.setOutput('id', release.id);
          return release.id;

  build-release-assets:
    name: Build Release Assets
    needs: create-release
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
              name: "Windows",
              os: windows-latest,
              cc: "cl",
              cxx: "cl",
              generators: "Visual Studio 17 2022",
              artifact: "NekoSystem-Windows.zip"
            }
          - {
              name: "Linux",
              os: ubuntu-latest,
              cc: "gcc",
              cxx: "g++",
              generators: "Unix Makefiles",
              artifact: "NekoSystem-Linux.tar.gz"
            }
          - {
              name: "macOS",
              os: macos-latest,
              cc: "clang",
              cxx: "clang++",
              generators: "Unix Makefiles",
              artifact: "NekoSystem-macOS.tar.gz"
            }

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies (Ubuntu)
      if: startsWith(matrix.config.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Install dependencies (macOS)
      if: startsWith(matrix.config.os, 'macos')
      run: |
        brew install cmake

    - name: Set up MSVC environment (Windows)
      if: startsWith(matrix.config.os, 'windows')
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} -G "${{ matrix.config.generators }}" -DNEKO_BUILD_TESTS=ON -DNEKO_AUTO_FETCH_DEPS=ON -DCMAKE_INSTALL_PREFIX=install

    - name: Build
      run: cmake --build build --config Release --parallel

    - name: Run tests
      working-directory: build
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          ctest -C Release --output-on-failure
        else
          ctest --output-on-failure
        fi
      shell: bash

    - name: Install
      run: cmake --install build --config Release

    - name: Package (Windows)
      if: startsWith(matrix.config.os, 'windows')
      run: |
        7z a ${{ matrix.config.artifact }} ./install/*

    - name: Package (Unix)
      if: "!startsWith(matrix.config.os, 'windows')"
      run: |
        tar -czf ${{ matrix.config.artifact }} -C install .

    - name: Upload Release Asset
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './${{ matrix.config.artifact }}';
          
          await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ needs.create-release.outputs.release_id }},
            name: '${{ matrix.config.artifact }}',
            data: fs.readFileSync(path)
          });

  publish-docs:
    name: Publish Documentation
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz

    - name: Generate documentation
      run: |
        # Create a simple Doxyfile if it doesn't exist
        if [ ! -f Doxyfile ]; then
          doxygen -g
          # Configure Doxygen for our project
          sed -i 's/PROJECT_NAME           = "My Project"/PROJECT_NAME           = "NekoSystem"/' Doxyfile
          sed -i 's/INPUT                  =/INPUT                  = include src/' Doxyfile
          sed -i 's/RECURSIVE              = NO/RECURSIVE              = YES/' Doxyfile
          sed -i 's/EXTRACT_ALL            = NO/EXTRACT_ALL            = YES/' Doxyfile
          sed -i 's/GENERATE_LATEX         = YES/GENERATE_LATEX         = NO/' Doxyfile
          sed -i 's/OUTPUT_DIRECTORY       =/OUTPUT_DIRECTORY       = docs/' Doxyfile
        fi
        doxygen

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/html